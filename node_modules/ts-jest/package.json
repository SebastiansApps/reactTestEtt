{
  "_args": [
    [
      {
        "raw": "ts-jest@^22.4.1",
        "scope": null,
        "escapedName": "ts-jest",
        "name": "ts-jest",
        "rawSpec": "^22.4.1",
        "spec": ">=22.4.1 <23.0.0",
        "type": "range"
      },
      "/Users/sebastiannilsson/Dokument/Programmering/React/Test"
    ]
  ],
  "_from": "ts-jest@>=22.4.1 <23.0.0",
  "_id": "ts-jest@22.4.1",
  "_inCache": true,
  "_location": "/ts-jest",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ts-jest_22.4.1_1519994618084_0.473603552613302"
  },
  "_npmUser": {
    "name": "kul",
    "email": "kulshekhar+npm@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "camelcase": "4.1.0",
    "decamelize": "1.2.0",
    "find-up": "2.1.0",
    "get-caller-file": "1.0.2",
    "graceful-fs": "4.1.11",
    "os-locale": "2.1.0",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "2.1.1",
    "universalify": "0.1.1",
    "which-module": "2.0.0",
    "wrap-ansi": "2.1.0",
    "y18n": "3.2.1"
  },
  "_requested": {
    "raw": "ts-jest@^22.4.1",
    "scope": null,
    "escapedName": "ts-jest",
    "name": "ts-jest",
    "rawSpec": "^22.4.1",
    "spec": ">=22.4.1 <23.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-22.4.1.tgz",
  "_shasum": "69defb2042d689cff9b4244365ef638ecd35f706",
  "_shrinkwrap": null,
  "_spec": "ts-jest@^22.4.1",
  "_where": "/Users/sebastiannilsson/Dokument/Programmering/React/Test",
  "author": {
    "name": "Kulshekhar Kabra",
    "email": "kulshekhar@users.noreply.github.com",
    "url": "https://github.com/kulshekhar"
  },
  "bugs": {
    "url": "https://github.com/kulshekhar/ts-jest/issues"
  },
  "contributors": [
    {
      "name": "Ahn Pham",
      "email": "anhpnnd@gmail.com"
    },
    {
      "name": "Alan Agius",
      "email": "alan.agius4@gmail.com"
    },
    {
      "name": "Alex Jover Morales",
      "email": "alexjovermorales@gmail.com"
    },
    {
      "name": "Andreas Krummsdorf",
      "email": "andreas.krummsdorf@doksafe.de"
    },
    {
      "name": "Anonymous",
      "email": "goodforonefare@gmail.com"
    },
    {
      "name": "Bartosz Gościński",
      "email": "bargosc@gmail.com"
    },
    {
      "name": "Blake Embrey",
      "email": "hello@blakeembrey.com"
    },
    {
      "name": "Bnaya Peretz",
      "email": "me@bnaya.net"
    },
    {
      "name": "Brian Ruddy",
      "email": "briancruddy@gmail.com"
    },
    {
      "name": "Chong Guo",
      "email": "cguo@azendless.com"
    },
    {
      "name": "Chris Sauve",
      "email": "chrismsauve@gmail.com"
    },
    {
      "name": "Christian Linne",
      "email": "ShadowVampire@web.de"
    },
    {
      "name": "Christian Rackerseder",
      "email": "git@echooff.de"
    },
    {
      "name": "Daniel Perez Alvarez",
      "email": "unindented@gmail.com"
    },
    {
      "name": "Danilo Bürger",
      "email": "info@danilobuerger.de"
    },
    {
      "name": "David Schkalee",
      "email": "david.schkalee@magicline.de"
    },
    {
      "name": "David Sheldrick",
      "email": "djsheldrick@gmail.com"
    },
    {
      "name": "Emil Persson",
      "email": "emil.n.persson@gmail.com"
    },
    {
      "name": "Eric Anderson",
      "email": "e@ericlanderson.com"
    },
    {
      "name": "Felipe Matos",
      "email": "felipems@yahoo.com.br"
    },
    {
      "name": "Forbes Lindesay",
      "email": "forbes@lindesay.co.uk"
    },
    {
      "name": "Gino Zhang",
      "email": "whitetrefoil@gmail.com"
    },
    {
      "name": "Gustav Wengel",
      "email": "gustavwengel@gmail.com"
    },
    {
      "name": "Henry Zektser",
      "email": "japhar81@gmail.com"
    },
    {
      "name": "Ihor Chulinda",
      "email": "ichulinda@gmail.com"
    },
    {
      "name": "J Cheyo Jimenez",
      "email": "cheyo@masters3d.com"
    },
    {
      "name": "Jim Cummins",
      "email": "jimthedev@gmail.com"
    },
    {
      "name": "Joscha Feth",
      "email": "joscha@feth.com"
    },
    {
      "name": "Junle Li",
      "email": "lijunle@gmail.com"
    },
    {
      "name": "Justin Bay",
      "email": "jwbay@users.noreply.github.com"
    },
    {
      "name": "Kamijin Fanta",
      "email": "kamijin@live.jp"
    },
    {
      "name": "Kulshekhar Kabra",
      "email": "kulshekhar@users.noreply.github.com"
    },
    {
      "name": "Kyle Roach",
      "email": "kroach.work@gmail.com"
    },
    {
      "name": "Marshall Bowers",
      "email": "elliott.codes@gmail.com"
    },
    {
      "name": "Martijn The",
      "email": "post@martijnthe.nl"
    },
    {
      "name": "Matheus Gambati",
      "email": "matheusgambati@gmail.com"
    },
    {
      "name": "Maxim Samoilov",
      "email": "samoilowmaxim@gmail.com"
    },
    {
      "name": "Michael Tiller",
      "email": "michael.tiller@xogeny.com"
    },
    {
      "name": "Mohammad Rajabifard",
      "email": "mo.rajbi@gmail.com"
    },
    {
      "name": "OJ Kwon",
      "email": "kwon.ohjoong@gmail.com"
    },
    {
      "name": "Oliver Joseph Ash",
      "email": "oliverjash@gmail.com"
    },
    {
      "name": "Orta Therox",
      "email": "orta.therox+gh@gmail.com"
    },
    {
      "name": "Patrick Housley",
      "email": "patrick.f.housley@gmail.com"
    },
    {
      "name": "Richard Silverton",
      "email": "richsilv@yahoo.co.uk"
    },
    {
      "name": "Rikki Tooley",
      "email": "rikki.tooley@travellocal.com"
    },
    {
      "name": "Simen Bekkhus",
      "email": "sbekkhus91@gmail.com"
    },
    {
      "name": "Thomas Fontaine",
      "email": "thomas.fontaine@me.com"
    },
    {
      "name": "Tom Crockett",
      "email": "tomcrockett@tuplehealth.com"
    },
    {
      "name": "Tony Valderrama",
      "email": "tony.valderrama@outlook.com"
    },
    {
      "name": "Trivikram Kamat",
      "email": "trivikr.dev@gmail.com"
    },
    {
      "name": "Umidbek Karimov",
      "email": "uma.karimov@gmail.com"
    }
  ],
  "dependencies": {
    "babel-core": "^6.24.1",
    "babel-plugin-istanbul": "^4.1.4",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.24.1",
    "babel-preset-jest": "^22.4.0",
    "cpx": "^1.5.0",
    "fs-extra": "4.0.3",
    "jest-config": "^22.4.0",
    "pkg-dir": "^2.0.0",
    "yargs": "^11.0.0"
  },
  "description": "A preprocessor with sourcemap support to help use Typescript with Jest",
  "devDependencies": {
    "@types/babel-core": "^6.7.14",
    "@types/es6-shim": "latest",
    "@types/fs-extra": "5.0.1",
    "@types/jest": "latest",
    "@types/node": "latest",
    "@types/react": "latest",
    "babel-preset-env": "^1.6.0",
    "cross-spawn": "latest",
    "cross-spawn-with-kill": "latest",
    "doctoc": "latest",
    "husky": "^0.14.3",
    "jest": "^22.4.0",
    "lint-staged": "^7.0.0",
    "prettier": "^1.5.3",
    "react": "latest",
    "react-test-renderer": "latest",
    "rimraf": "latest",
    "ts-jest": "latest",
    "tslint": "next",
    "typescript": "^2.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6D3rWDiIuuRmtnoxDK0s69VK8Zw+JTdOkG9KeqQJF1U4ODlvAXg7ZLHfjZTmRFEshitFFeSmJ/reKzufYeibWA==",
    "shasum": "69defb2042d689cff9b4244365ef638ecd35f706",
    "tarball": "https://registry.npmjs.org/ts-jest/-/ts-jest-22.4.1.tgz",
    "fileCount": 33,
    "unpackedSize": 235820
  },
  "gitHead": "14f5949d8fdc8298547666be6d1b6c40f13dc8f6",
  "homepage": "https://github.com/kulshekhar/ts-jest#readme",
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "<rootDir>/dist/preprocessor.js"
    },
    "testRegex": "tests/__tests__/.*\\.spec\\.ts$",
    "testPathIgnorePatterns": [
      "/node_modules/",
      "tests/__tests__/watch.spec.ts"
    ],
    "coverageReporters": [
      "text"
    ],
    "coverageDirectory": "test_coverage_dir",
    "collectCoverageFrom": [
      "src/**/*.tsx",
      "src/**/*.ts"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json"
    ]
  },
  "keywords": [
    "jest",
    "typescript",
    "sourcemap",
    "react",
    "testing"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "prettier --write --single-quote --trailing-comma es5",
      "git add"
    ],
    "*.ts": [
      "prettier --write --single-quote --trailing-comma all",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "kul",
      "email": "kulshekhar+npm@gmail.com"
    }
  ],
  "name": "ts-jest",
  "optionalDependencies": {},
  "peerDependencies": {
    "jest": "^22.4.0 || ^22.5.0-alpha.1 || ^23.0.0-alpha.1",
    "typescript": "2.x"
  },
  "readme": "# ts-jest\n\n[![npm version](https://badge.fury.io/js/ts-jest.svg)](https://badge.fury.io/js/ts-jest)\n[![NPM downloads](https://img.shields.io/npm/dm/ts-jest.svg?style=flat)](https://npmjs.org/package/ts-jest)\n[![Greenkeeper badge](https://badges.greenkeeper.io/kulshekhar/ts-jest.svg)](https://greenkeeper.io/)\n\n[![Build Status for linux](https://travis-ci.org/kulshekhar/ts-jest.svg?branch=master)](https://travis-ci.org/kulshekhar/ts-jest)\n[![Build Status for Windows](https://ci.appveyor.com/api/projects/status/g8tt9qd7usv0tolb/branch/master?svg=true)](https://ci.appveyor.com/project/kulshekhar/ts-jest/branch/master)\n\n**Important note: When using React 16 with Node version 8, you might see wrong line numbers for errors originating from tsx files. There's [an issue with more details on this](https://github.com/kulshekhar/ts-jest/issues/334)**\n\n> Note: Looking for collaborators. [Want to help improve ts-jest?](https://github.com/kulshekhar/ts-jest/issues/223)\n\nts-jest is a TypeScript preprocessor with source map support for Jest that lets you use Jest to test projects written in TypeScript.\n\n## Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Usage](#usage)\n  - [Versioning](#versioning)\n  - [Coverage](#coverage)\n- [Default Setup](#default-setup)\n  - [Sourcemap support](#sourcemap-support)\n  - [Automatically finds tsconfig.json](#automatically-finds-tsconfigjson)\n  - [Supports synthetic modules](#supports-synthetic-modules)\n  - [Supports automatic of jest.mock() calls](#supports-automatic-of-jestmock-calls)\n- [Configuration](#configuration)\n  - [tsconfig](#tsconfig)\n  - [Module path mapping](#module-path-mapping)\n  - [Skipping Babel](#skipping-babel)\n  - [Using `.babelrc`](#using-babelrc)\n  - [Using a custom Babel config](#using-a-custom-babel-config)\n  - [TS compiler & error reporting](#ts-compiler--error-reporting)\n- [Use cases](#use-cases)\n  - [React Native](#react-native)\n- [Angular 2](#angular-2)\n- [Using ES2015+ features in Javascript files](#using-es2015-features-in-javascript-files)\n- [Tips](#tips)\n  - [Importing packages written in TypeScript](#importing-packages-written-in-typescript)\n- [Known Limitations](#known-limitations)\n  - [Known limitations for TS compiler options](#known-limitations-for-ts-compiler-options)\n  - [Known Limitations for hoisting](#known-limitations-for-hoisting)\n  - [`const enum` is not supported](#const-enum-is-not-supported)\n- [How to Contribute](#how-to-contribute)\n  - [Quickstart to run tests (only if you're working on this package)](#quickstart-to-run-tests-only-if-youre-working-on-this-package)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Usage\n\nTo use this in your project, run:\n```sh\nnpm install --save-dev ts-jest @types/jest\n```\nIf you don't already have jest installed,\n```sh\nnpm install --save-dev jest ts-jest @types/jest\n```\nModify your project's `package.json` so that the `jest` section looks something like:\n```json\n{\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.tsx?$\": \"ts-jest\"\n    },\n    \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\",\n      \"jsx\",\n      \"json\",\n      \"node\"\n    ]\n  }\n}\n```\nThis setup should allow you to write Jest tests in Typescript and be able to locate errors without any additional gymnastics.\n\n### Versioning\nFrom version `\"jest\": \"17.0.0\"` we are using same MAJOR.MINOR as [`Jest`](https://github.com/facebook/jest).\nFor `\"jest\": \"< 17.0.0\"` use `\"ts-jest\": \"0.1.13\"`. Docs for it see [here](https://github.com/kulshekhar/ts-jest/blob/e1f95e524ed62091736f70abf63530f1f107ec03/README.md).\n\nYou can try using ts-jest with `jest@test`; use at your own risk! (And file an issue if you find problems.)\n\n### Coverage\n\nPrior to version `20.0.0`, coverage reports could be obtained using the inbuilt coverage processor in ts-jest. Starting with version `20.0.0`, ts-jest delegates coverage processing to jest and no longer includes a coverage processor.\n\n> Please note that the `outDir` property in the `jest` configuration section is removed in coverage mode, due to [#201](https://github.com/kulshekhar/ts-jest/issues/201).\n\n## Default Setup\nts-jest tries to ship with sensible defaults, to get you on your feet as quickly as possible.\n\n### Sourcemap support\nSourcemaps should work out of the box. That means your stack traces should have the correct line numbers,\nand you should be able to step through the TypeScript code using a debugger.\n\n### Automatically finds tsconfig.json\nts-jest automatically located your `tsconfig` file.\nIf you want to compile typescript with a special configuration, you [can do that too](#tsconfig)\n\n### Supports synthetic modules\nIf you're on a codebase where you're using synthetic default imports, e.g.\n```javascript 1.6\n//Regular imports\nimport * as React from 'react';\n\n//Synthetic default imports:\nimport React from 'react';\n```\nts-jest tries to support that. If `allowSyntheticDefaultImports` is set to true in your `tsconfig` file, it uses babel\nto automatically create the synthetic default exports for you - nothing else needed.\nYou can opt-out of this behaviour with the [skipBabel flag](#skipping-babel)\n\n### Supports automatic of jest.mock() calls\n[Just like Jest](https://facebook.github.io/jest/docs/manual-mocks.html#using-with-es-module-imports) ts-jest\nautomatically uses babel to hoist your `jest.mock()` calls to the top of your file.\nYou can opt-out of this behaviour with the [skipBabel flag](#skipping-babel)\n\n## Configuration\nIf the default setup doesn't address your requirements, you can create a custom setup to suit your project.\n\n### tsconfig\nBy default this package will try to locate `tsconfig.json` and use its compiler options for your `.ts` and `.tsx` files.\n\nYou can override this behaviour by pointing ts-jest to a custom TypeScript configuration file.\nYou can do this by setting the `tsConfigFile` option in your global variables under the `ts-jest` key to path of the\ncustom configuration file (relative to the project's root directory)\n\n```json\n{\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"tsConfigFile\": \"my-tsconfig.json\"\n      }\n    }\n  }\n}\n```\n**Warning: In the past, a `__TS_CONFIG__` section could be used to provide an inline TypeScript configuration. Going forward, all custom configurations should be in a different file and the `tsConfigFile` key in the `ts-jest` section (under `globals`) should point to this file (as shown above). You can ignore this if the configuration you want is identical to the main `tsconfig.json`.**\n\nFor all available `tsc` options see [TypeScript docs](https://www.typescriptlang.org/docs/handbook/compiler-options.html).\n\nNote that if you haven't explicitly set the `module` property through a separate configuration file with `tsConfigFile`, it will be overwritten to `commonjs` (regardless of the value in `tsconfig.json`) since that is the format Jest expects. This only happens during testing. \n\nIf you *have* explicitly set the `module` property but to a different value than `commonjs`, Jest may throw errors. In that case, a practical workaround is to make a `tsconfig.jest.json` file which [`extends`](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends) your real `tsconfig.json` but sets `module` to `commonjs`:\n\n```js\n// tsconfig.jest.json\n{\n  \"extends\": \"./tsconfig\",\n  \"compilerOptions\": {\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n### Module path mapping\n\nIf you use [\"baseUrl\"](https://www.typescriptlang.org/docs/handbook/module-resolution.html) and \"paths\" options for the compiler, see [\"moduleNameMapper\"](https://facebook.github.io/jest/docs/en/configuration.html#modulenamemapper-object-string-string) option on Jest docs.\n\n### Skipping Babel\nIf you don't use mocks, or synthetic default imports you can skip the babel-transpilation step.\nThis means `jest.mock()` calls will not be hoisted to the top,\nand synthetic default exports will never be created.\nSimply add skipBabel to your global variables under the `ts-jest` key:\n```json\n//This will skip babel transpilation\n{\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"skipBabel\": true\n      }\n    }\n  }\n}\n```\n\n### Using `.babelrc`\n\nWhen using Babel, ts-jest, by default, doesn't use the `.babelrc` file. If you want ts-jest to use `.babelrc`, you should set the `globals > ts-jest > useBabelrc` flag to `true` in your `jest` configuration.\n\n```json\n{\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"useBabelrc\": true\n      }\n    }\n  }\n}\n```\n\n### Using a custom Babel config\n\nIn some cases, projects may not want to have a `.babelrc` file, but still need to provide custom Babel configuration. In these cases, you can provide a Babel config directly to `ts-jest` using the `globals > ts-jest > babelConfig` option in your `jest` configuration.\n\n```json\n{\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"babelConfig\": {\n          \"presets\": [\"env\"]\n        }\n      }\n    }\n  }\n}\n```\n\nNote that if you also set the `useBabelrc` option to `true`, any configuration passed using this method will be overwritten by corresponding keys in `.babelrc` files.\n\n### TS compiler & error reporting\nIf you want to enable Syntactic & Semantic TypeScript error reporting you can enable this through `enableTsDiagnostics` flag;\n\n```json\n{\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"enableTsDiagnostics\": true\n      }\n    }\n  }\n}\n```\n\n## Use cases\n\n### React Native\n\nThere is a few additional steps if you want to use it with React Native.\n\nInstall `babel-jest` and `babel-preset-react-native` modules.\n\n```sh\nnpm install -D babel-jest babel-preset-react-native\n```\n\nEnsure `.babelrc` contains:\n\n```json\n{\n  \"presets\": [\"react-native\"],\n  \"sourceMaps\": \"inline\"\n}\n```\n\nIn `package.json`, inside `jest` section, the `transform` should be like this:\n```json\n\"transform\": {\n  \"^.+\\\\.jsx?$\": \"<rootDir>/node_modules/babel-jest\",\n  \"^.+\\\\.tsx?$\": \"ts-jest\"\n}\n```\n\nFully completed jest section should look like this:\n\n```json\n\"jest\": {\n    \"preset\": \"react-native\",\n    \"transform\": {\n      \"^.+\\\\.jsx?$\": \"<rootDir>/node_modules/babel-jest\",\n      \"^.+\\\\.tsx?$\": \"ts-jest\"\n    },\n    \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\",\n      \"jsx\",\n      \"json\",\n      \"node\"\n    ],\n    \"globals\": {\n      \"ts-jest\": {\n        \"useBabelrc\": true\n      }\n    }\n  }\n```\nIf only testing typescript files then remove the `js` option in the testRegex.\n\n## Angular 2\nWhen using Jest with Angular (a.k.a Angular 2) apps you will likely need to parse HTML templates. If you're unable to add `html-loader` to webpack config (e.g. because you don't want to eject from `angular-cli`) you can do so by defining `__TRANSFORM_HTML__` key in `globals` for `jest`.\n\n```json\n{\n  \"jest\": {\n    \"globals\": {\n      \"__TRANSFORM_HTML__\": true\n    }\n  }\n}\n```\n\nYou'll also need to extend your `transform` regex with `html` extension:\n```json\n{\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.(tsx?|html)$\": \"ts-jest\"\n    }\n  }\n}\n```\n\n## Using ES2015+ features in Javascript files\n\nThe default setup shown here picks up only `.ts` and `.tsx` files. However, if there are javascript files in your project that use ES2015+ features (spread operator, import, etc), you probably want them processed. There are two ways you can do this:\n\n- use ts-jest to process js files\n\n````\n    \"transform\": {\n      \"^.+\\\\.(t|j)sx?$\": \"ts-jest\"\n    }\n````\n\n- use another transformer to process js files\n\n```\n    \"transform\": {\n      \"^.+\\\\.jsx?$\": \"<rootDir>/node_modules/babel-jest\",\n      \"^.+\\\\.tsx?$\": \"ts-jest\"\n    }\n```\n\n## Tips\n### Importing packages written in TypeScript\n\nIf you have dependencies on npm packages that are written in TypeScript but are\n**not** published in ES5 you have to tweak your configuration. For example\nyou depend on a private scoped package `@foo/bar` you have to add following to\nyour Jest configuration:\n\n```js\n{\n  // ...\n  \"transformIgnorePatterns\": [\n    \"<rootDir>/node_modules/(?!@foo)\"\n  ]\n  // ...\n}\n```\n\nBy default Jest ignores everything in `node_modules`. This setting prevents Jest from ignoring the package you're interested in, in this case `@foo`, while continuing to ignore everything else in `node_modules`.\n\n\n## Known Limitations\n### Known limitations for TS compiler options\n- You can't use `\"target\": \"ES6\"` while using `node v4` in your test environment;\n- You can't use `\"jsx\": \"preserve\"` for now (see [progress of this issue](https://github.com/kulshekhar/ts-jest/issues/63));\n- If you use `\"baseUrl\": \"<path_to_your_sources>\"`, you also have to change `jest config` a little bit (also check [Module path mapping](#module-path-mapping) section):\n```json\n\"jest\": {\n  \"moduleDirectories\": [\"node_modules\", \"<path_to_your_sources>\"]\n}\n```\n\n### Known Limitations for hoisting\nIf the `jest.mock()` calls is placed after actual code, (e.g. after functions or classes) and `skipBabel` is not set,\nthe line numbers in stacktraces will be off.\nWe suggest placing the `jest.mock()` calls after the imports, but before any actual code.\n\n### `const enum` is not supported\n\nThis is due to a limitation in the ts-jest preprocessor which compiles each test file individually, therefore ignoring implementations of ambient declarations. The TypeScript team currently have [no plan to support const enum inlining](https://github.com/Microsoft/TypeScript/issues/5243) for this particular compiler method. See #112 and #281 for more information.\n\nOne possible workaround is to manually inline usage of const enum values - i.e. in your code, use `let x: Enum = 1 as Enum` as opposed to `let x: Enum = Enum.FirstValue`. This allows you to keep the type checking on enums without running into this issue.\n\n## How to Contribute\nIf you have any suggestions/pull requests to turn this into a useful package, just open an issue and I'll be happy to work with you to improve this.\n\n### Quickstart to run tests (only if you're working on this package)\n\n```sh\ngit clone https://github.com/kulshekhar/ts-jest\ncd ts-jest\nnpm install\nnpm test\n```\n\n**Note:** If you are cloning on Windows, you may have to run `git config --system core.longpaths true` for Windows to stop complaining about long filenames.\n\n## License\n\nCopyright (c) [Authors](AUTHORS).\nThis source code is licensed under the [MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kulshekhar/ts-jest.git"
  },
  "scripts": {
    "build": "cpx index.d.ts dist/ && tsc -p .",
    "build:watch": "cpx index.d.ts dist/ && tsc -p . -w",
    "clean": "rimraf dist/**/* && rimraf tests/simple/coverage && rimraf tests/simple-async/coverage && rimraf tests/**/*/debug.txt",
    "clean-build": "npm run clean && npm run build",
    "doc": "doctoc .",
    "format": "prettier --single-quote --trailing-comma all --write \"{src,scripts,tests}/**/*.ts\" && prettier --single-quote --trailing-comma es5 --write \"{src,scripts,tests}/**/*.js\"",
    "postcommit": "git reset",
    "precommit": "lint-staged",
    "prepublish": "npm run clean-build",
    "pretest": "npm run tslint && npm run clean-build",
    "test": "node scripts/tests.js",
    "tslint": "tslint src/*.ts"
  },
  "types": "./dist/index.d.ts",
  "version": "22.4.1"
}
